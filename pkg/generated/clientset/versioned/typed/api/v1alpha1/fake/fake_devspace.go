// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/prasad89/devspace-operator/api/v1alpha1"
	apiv1alpha1 "github.com/prasad89/devspace-operator/pkg/generated/applyconfiguration/api/v1alpha1"
	typedapiv1alpha1 "github.com/prasad89/devspace-operator/pkg/generated/clientset/versioned/typed/api/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDevSpaces implements DevSpaceInterface
type fakeDevSpaces struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.DevSpace, *v1alpha1.DevSpaceList, *apiv1alpha1.DevSpaceApplyConfiguration]
	Fake *FakeApiV1alpha1
}

func newFakeDevSpaces(fake *FakeApiV1alpha1) typedapiv1alpha1.DevSpaceInterface {
	return &fakeDevSpaces{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.DevSpace, *v1alpha1.DevSpaceList, *apiv1alpha1.DevSpaceApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("devspaces"),
			v1alpha1.SchemeGroupVersion.WithKind("DevSpace"),
			func() *v1alpha1.DevSpace { return &v1alpha1.DevSpace{} },
			func() *v1alpha1.DevSpaceList { return &v1alpha1.DevSpaceList{} },
			func(dst, src *v1alpha1.DevSpaceList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.DevSpaceList) []*v1alpha1.DevSpace { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.DevSpaceList, items []*v1alpha1.DevSpace) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
